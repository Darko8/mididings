#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# mididings
#
# Copyright (C) 2008-2009  Dominic Sacr√©  <dominic.sacre@gmx.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#

import sys
import optparse

import mididings
import mididings.extra


class Dings(object):
    def __init__(self, backend, client_name, start_delay):
        if backend:
            mididings.config(True, backend=backend)
        if client_name:
            mididings.config(True, client_name=client_name)
        if start_delay:
            mididings.config(True, start_delay=start_delay)

        self.dings_dict = mididings.__dict__.copy()
        self.dings_dict.update(mididings.extra.__dict__)

    def run_file(self, filename):
        execfile(filename, self.dings_dict)

    def run_patch(self, in_ports, out_ports, patch):
        if in_ports:
            mididings.config(in_ports=in_ports)
        if out_ports:
            mididings.config(out_ports=out_ports)

        mididings.run(eval(patch, self.dings_dict))


if __name__ == '__main__':
        parser = optparse.OptionParser()
        parser.add_option('-b', dest='backend')
        parser.add_option('-c', dest='client_name')
        parser.add_option('-i', dest='in_ports', type=int)
        parser.add_option('-o', dest='out_ports', type=int)
        parser.add_option('-d', dest='start_delay', type=float)
        parser.add_option('-f', dest='filename')

        options, args = parser.parse_args(sys.argv[1:])

        if len(args) == 0 and not options.filename:
            parser.error("no patch and no filename specified")
        elif len(args) > 1:
            parser.error("more than one patch specified")

        app = Dings(options.backend, options.client_name, options.start_delay)

        if options.filename:
            app.run_file(options.filename)
        else:
            app.run_patch(options.in_ports, options.out_ports, args[0])
