#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# mididings
#
# Copyright (C) 2008-2011  Dominic Sacr√©  <dominic.sacre@gmx.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#

import sys
import os
import optparse

import mididings
import mididings.extra


class Dings(object):
    def __init__(self, backend, client_name, start_delay):
        if backend:
            mididings.config(True, backend=backend)
        if client_name:
            mididings.config(True, client_name=client_name)
        if start_delay:
            mididings.config(True, start_delay=start_delay)

        self.dings_dict = mididings.__dict__.copy()
        self.dings_dict.update(mididings.extra.__dict__)

    def run_file(self, filename):
        # add filename's directory to sys.path to allow import from the same directory
        d = os.path.dirname(filename)
        if not d:
            d = '.'
        sys.path.insert(0, d)
        # just a kludge to make AutoRestart() work
        sys.modules['dings_main'] = type('FakeModule', (), {'__file__': filename})

        if sys.version_info >= (3,):
            exec(compile(open(filename).read(), filename, 'exec'), self.dings_dict)
        else:
            execfile(filename, self.dings_dict)

    def run_patch(self, in_ports, out_ports, patch):
        if in_ports:
            mididings.config(in_ports=in_ports)
        if out_ports:
            mididings.config(out_ports=out_ports)

        mididings.run(eval(patch, self.dings_dict))


if __name__ == '__main__':
    usage = "Usage: mididings [options] \"patch\"\n" \
            "       mididings [options] -f filename"
    parser = optparse.OptionParser(usage=usage)
    parser.add_option('-b', dest='backend', help="name of backend to use")
    parser.add_option('-c', dest='client_name', help="ALSA or JACK client name")
    parser.add_option('-i', dest='in_ports', type=int, help="number of input ports")
    parser.add_option('-o', dest='out_ports', type=int, help="number of output ports")
    parser.add_option('-d', dest='start_delay', type=float, help="delay (in seconds) before starting MIDI processing")
    parser.add_option('-f', dest='filename', help="filename of script to run")

    options, args = parser.parse_args(sys.argv[1:])

    if len(args) == 0 and not options.filename:
        parser.error("no patch and no filename specified")
    elif len(args) > 1:
        parser.error("more than one patch specified")

    app = Dings(options.backend, options.client_name, options.start_delay)

    if options.filename:
        app.run_file(options.filename)
    else:
        app.run_patch(options.in_ports, options.out_ports, args[0])
